/*
  This file is automatically generated. Any changes will be overwritten.
  Modify dashboard.component.ts instead.
*/
import { ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { Subscription } from 'rxjs';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { HeadingComponent } from '@radzen/angular/dist/heading';
import { CardComponent } from '@radzen/angular/dist/card';
import { ProgressBarComponent } from '@radzen/angular/dist/progressbar';
import { GaugeComponent } from '@radzen/angular/dist/gauge';
import { SparklineComponent } from '@radzen/angular/dist/sparkline';
import { ImageComponent } from '@radzen/angular/dist/image';
import { ButtonComponent } from '@radzen/angular/dist/button';
import { GridComponent } from '@radzen/angular/dist/grid';
import { LabelComponent } from '@radzen/angular/dist/label';

import { NorthwindService } from '../northwind.service';
import { SecurityService } from '../security.service';

export class DashboardGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('heading8') heading8: HeadingComponent;
  @ViewChild('heading9') heading9: HeadingComponent;
  @ViewChild('card0') card0: CardComponent;
  @ViewChild('heading0') heading0: HeadingComponent;
  @ViewChild('heading1') heading1: HeadingComponent;
  @ViewChild('progressbar0') progressbar0: ProgressBarComponent;
  @ViewChild('heading3') heading3: HeadingComponent;
  @ViewChild('heading4') heading4: HeadingComponent;
  @ViewChild('card3') card3: CardComponent;
  @ViewChild('heading12') heading12: HeadingComponent;
  @ViewChild('gauge0') gauge0: GaugeComponent;
  @ViewChild('card1') card1: CardComponent;
  @ViewChild('heading2') heading2: HeadingComponent;
  @ViewChild('heading5') heading5: HeadingComponent;
  @ViewChild('sparkline0') sparkline0: SparklineComponent;
  @ViewChild('heading6') heading6: HeadingComponent;
  @ViewChild('heading7') heading7: HeadingComponent;
  @ViewChild('card2') card2: CardComponent;
  @ViewChild('heading10') heading10: HeadingComponent;
  @ViewChild('image0') image0: ImageComponent;
  @ViewChild('heading11') heading11: HeadingComponent;
  @ViewChild('card4') card4: CardComponent;
  @ViewChild('button1') button1: ButtonComponent;
  @ViewChild('heading13') heading13: HeadingComponent;
  @ViewChild('grid0') grid0: GridComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  _location: Location;

  _subscription: Subscription;

  northwind: NorthwindService;

  security: SecurityService;

  totalSales: any;

  salesTarget: any;

  customers: any;

  employeeOfTheMonthName: any;

  employeeOfTheMonth: any;

  getEmployeesResult: any;

  getEmployeesCount: any;

  parameters: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.northwind = this.injector.get(NorthwindService);
    this.security = this.injector.get(SecurityService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    this._subscription.unsubscribe();
  }


  load() {
    this.totalSales = 49234;

    this.salesTarget = 80000;

    this.customers = [134, 193, 156, 123, 192, 155, 132, 163, 143, 182, 192, 233, 129, 183, 233, 150, 113, 233, 323, 354, 433, 425, 365, 322, 280, 321, 393, 436,530,553,576];

    this.employeeOfTheMonthName = "Loading ...";

    this.northwind.getEmployeeById(1)
    .subscribe((result: any) => {
      this.employeeOfTheMonth = result;

      this.employeeOfTheMonthName = result.FirstName + ' ' + result.LastName;
    }, (result: any) => {

    });

    this.northwind.getEmployees(null, this.grid0.allowPaging ? this.grid0.pageSize : null, this.grid0.allowPaging ? 0 : null, null, null, this.grid0.allowPaging)
    .subscribe((result: any) => {
      this.getEmployeesResult = result.value;

      this.getEmployeesCount = this.grid0.allowPaging ? result['@odata.count'] : result.value.length;

      this.grid0.isLoading = false
    }, (result: any) => {

    });
  }

  button1Click(event: any) {
    this.northwind.getEmployees(null, null, null, null, null, null)
  }

  grid0LoadData(event: any) {
    this.northwind.getEmployees(null, event.top, event.skip, `${event.orderby}`, ``, event.top != null && event.skip != null)
    .subscribe((result: any) => {
      this.getEmployeesResult = result.value;

      this.getEmployeesCount = event.top != null && event.skip != null ? result['@odata.count'] : result.value.length;
    }, (result: any) => {

    });
  }
}
